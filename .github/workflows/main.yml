name: Android Build ## name of the workflow

on:
  workflow_dispatch: # To trigger manual build
  release:
    types: [published] # only run the workflow when a new release has been published

jobs:
  android-build:
    name: Android Build
    runs-on: ubuntu-latest # using ubuntu latest version / or you can use a specific version
    defaults:
      run:
        working-directory: ./rentnative
    steps:
      - name: Check out Git repository # clone the repo to local ci workspace
        uses: actions/checkout@v2

      - name: Set up our JDK environment # setup JDK environment: mandatory as we need to build  android project
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'


      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Restore node_modules from cache
        uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies # install project deps with --frozen-lockfile to make sure we will have the same packages version ( very recommended  on running yarn install on ci)
        run: yarn install --frozen-lockfile

      ## configure cash for gradle : will help to reduce build time
      - name: Cache Gradle Wrapper
        uses: actions/cache@v2
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-wrapper-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}

      - name: Cache Gradle Dependencies
        uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-caches-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-caches-

      - name: Generate signed APK
        id: build_and_sign_app
        uses: JuliusGaralevicius/build-and-sign-apk@master
        with:
          keystore_b64: ${{ secrets.ANDROID_SIGNING_KEY_BASE64 }}
          keystore_password: ${{ secrets.ANDROID_SIGNING_STORE_PASSWORD }}
          key_alias: ${{ secrets.ANDROID_SIGNING_KEY_ALIAS }}
          key_password: ${{ secrets.ANDROID_SIGNING_KEY_PASSWORD }}
          gradlew_dir: ${{ github.workspace }}/rentnative/android/
      
      - name: Decode service account
        id: decode-appdistribution-serviceaccount
        uses: timheuer/base64-to-file@master
        with:
          fileName: 'service-account.json'
          fileDir: './app_distribution/'
          encodedString: ${{ secrets.ANDROID_FIREBASE_SERVICE_ACCOUNT_64 }}
          
      - name: echo file 
        shell: bash
        run: echo ${{steps.decode-appdistribution-serviceaccount.outputs.filePath}}
             cat ${{steps.decode-appdistribution-serviceaccount.outputs.filePath}}
          
      ## Distribute app to Firebase App Distribution for testing / use google play internal track if you have a google play account
      - name: upload artifact to Firebase App Distribution
        uses: wzieba/Firebase-Distribution-Github-Action@v1.3.4
        with:
          appId: ${{secrets.ANDROID_FIREBASE_APP_ID}}
          serviceCredentialsFile: ${{ steps.decode-appdistribution-serviceaccount.outputs.filePath }}
          groups: testers
          file: ${{steps.build_and_sign_app.outputs.signed-bundle}}
          debug: true
     

